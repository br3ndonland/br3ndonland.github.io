---
import Icon from "./Icon.astro"

interface Props {
  menuElementId?: string
}

const { menuElementId = "menu-content" } = Astro.props
---

<menu-button data-menu-element-id={menuElementId}>
  <template>
    <button aria-expanded="false">
      <span class="sr-only">Menu</span>
      <Icon icon="list" />
    </button>
  </template>
</menu-button>

<script>
  class MenuButton extends HTMLElement {
    constructor() {
      super()

      // Inject menu toggle button when JS runs.
      this.appendChild(this.querySelector("template")!.content.cloneNode(true))
      const btn = this.querySelector("button")!

      // Hide menu by default.
      const menuElementId = this.dataset.menuElementId!
      const menu = document.getElementById(menuElementId)!
      menu.hidden = true

      // Set whether the menu is currently expanded or collapsed.
      const setExpanded = (expand: boolean) => {
        btn.setAttribute("aria-expanded", expand ? "true" : "false")
        menu.hidden = !expand
      }

      // Toggle menu visibility when the menu button is clicked.
      btn.addEventListener("click", () => setExpanded(menu.hidden))

      // Hide menu button for large screens.
      const handleViewports = (e: MediaQueryList | MediaQueryListEvent) => {
        setExpanded(e.matches)
        btn.hidden = e.matches
      }
      const mediaQueries = window.matchMedia("(min-width: 50em)")
      handleViewports(mediaQueries)
      mediaQueries.addEventListener("change", handleViewports)
    }
  }
  customElements.define("menu-button", MenuButton)
</script>

<style>
  button {
    position: relative;
    display: flex;
    border: 0;
    border-radius: 999rem;
    padding: 0.5rem;
    font-size: 1.5rem;
    color: var(--gray-300);
    background: radial-gradient(var(--gray-900), var(--gray-800) 150%);
    box-shadow: var(--shadow-md);
  }

  button[aria-expanded="true"] {
    color: var(--gray-0);
    background:
      linear-gradient(180deg, var(--gray-600), transparent),
      radial-gradient(var(--gray-900), var(--gray-800) 150%);
  }

  button[hidden] {
    display: none;
  }

  button::before {
    position: absolute;
    inset: -1px;
    content: "";
    background: var(--gradient-stroke);
    border-radius: 999rem;
    z-index: -1;
  }
</style>
